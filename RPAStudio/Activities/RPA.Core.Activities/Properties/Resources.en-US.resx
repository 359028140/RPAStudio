<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Do" xml:space="preserve">
    <value>Do</value>
  </data>
  <data name="DropActivityHere" xml:space="preserve">
    <value>Drop activity here</value>
  </data>
  <data name="Description1" xml:space="preserve">
    <value>Specifies that the remaining activities will continue even if the current activity fails. Only Boolean values are supported.</value>
  </data>
  <data name="Description2" xml:space="preserve">
    <value>Process name</value>
  </data>
  <data name="Category1" xml:space="preserve">
    <value>UI Object</value>
  </data>
  <data name="DisplayName1" xml:space="preserve">
    <value>Window selector</value>
  </data>
  <data name="Description3" xml:space="preserve">
    <value>The Text property used to find specific UI elements when performing activities</value>
  </data>
  <data name="Category2" xml:space="preserve">
    <value>Output</value>
  </data>
  <data name="Description4" xml:space="preserve">
    <value>A collection of process objects representing the processes that are running in the current Windows session.</value>
  </data>
  <data name="Description5" xml:space="preserve">
    <value>A process type object that describes the process to be closed.</value>
  </data>
  <data name="Description6" xml:space="preserve">
    <value>The name of the process to close.</value>
  </data>
  <data name="Description7" xml:space="preserve">
    <value>Specifies the amount of time, in milliseconds, to wait for an activity to run before throwing an error.  The default is 3000 milliseconds (3 seconds).</value>
  </data>
  <data name="Description8" xml:space="preserve">
    <value>Parameters that can be passed to the application at startup.</value>
  </data>
  <data name="Description9" xml:space="preserve">
    <value>You can find the full file path of the executable for the application you want to open.  Note: All strings must be placed between quotes.</value>
  </data>
  <data name="Description10" xml:space="preserve">
    <value>The path to the current working directory.  This field only accepts string variables.  Note: All string variables must be placed between quotes.</value>
  </data>
  <data name="Description11" xml:space="preserve">
    <value>You can find the full path to the executabel file of the application you want to open.  Note: All strings must be placed between quotes.</value>
  </data>
  <data name="Description12" xml:space="preserve">
    <value>The data retrieved from the clipboard.</value>
  </data>
  <data name="Description13" xml:space="preserve">
    <value>The text to be copied to the clipboard.</value>
  </data>
  <data name="Description14" xml:space="preserve">
    <value>Copy files or folders</value>
  </data>
  <data name="Category3" xml:space="preserve">
    <value>Enter</value>
  </data>
  <data name="Description15" xml:space="preserve">
    <value>The DataColumn object to be attached to the column set of the DataTable.  If this property is set, all properties under the Options category are ignored</value>
  </data>
  <data name="Description16" xml:space="preserve">
    <value>The name of the new column</value>
  </data>
  <data name="Description17" xml:space="preserve">
    <value>The DataTable object to add the column to</value>
  </data>
  <data name="Category4" xml:space="preserve">
    <value>Option</value>
  </data>
  <data name="DisplayName2" xml:space="preserve">
    <value>Allowed to be empty</value>
  </data>
  <data name="Description18" xml:space="preserve">
    <value>Specify whether the fields in the new column are allowed to be empty</value>
  </data>
  <data name="DisplayName3" xml:space="preserve">
    <value>Auto increment</value>
  </data>
  <data name="Description19" xml:space="preserve">
    <value>Specifies whether the value of the column is automatically incremented when a new row is added</value>
  </data>
  <data name="DisplayName4" xml:space="preserve">
    <value>Unique constraint</value>
  </data>
  <data name="Description20" xml:space="preserve">
    <value>Specify the value in each row of the new column must be unique</value>
  </data>
  <data name="DisplayName5" xml:space="preserve">
    <value>The maximum length</value>
  </data>
  <data name="Description21" xml:space="preserve">
    <value>Specify the maximum length of the value of the new column</value>
  </data>
  <data name="DisplayName6" xml:space="preserve">
    <value>Defaults</value>
  </data>
  <data name="Description22" xml:space="preserve">
    <value>The DataRow object to be added to the DataTable. If this property is set, the ArrayRow property is ignored.</value>
  </data>
  <data name="Description23" xml:space="preserve">
    <value>An array of objects to add to the DataTable.  The type of each object should be mapped to the type of its corresponding column in the DataTable.</value>
  </data>
  <data name="Description24" xml:space="preserve">
    <value>The DataTable object to add row data to</value>
  </data>
  <data name="Description25" xml:space="preserve">
    <value>a DataTable generated from row and column information</value>
  </data>
  <data name="Description26" xml:space="preserve">
    <value>The DataTable object to clear all data</value>
  </data>
  <data name="Description27" xml:space="preserve">
    <value>The DataTable variable to filter.  This field only supports DataTable variables</value>
  </data>
  <data name="DisplayName7" xml:space="preserve">
    <value>Line filtering mode</value>
  </data>
  <data name="Description28" xml:space="preserve">
    <value>Specifies whether to filter the table by keeping or deleting the target row</value>
  </data>
  <data name="DisplayName8" xml:space="preserve">
    <value>Column filtering mode</value>
  </data>
  <data name="Description29" xml:space="preserve">
    <value>Specify whether to filter the table by retaining or deleting the target column</value>
  </data>
  <data name="Description30" xml:space="preserve">
    <value>Filter the result DataTable</value>
  </data>
  <data name="Description31" xml:space="preserve">
    <value>a single-row operation of the DataTable variable</value>
  </data>
  <data name="DisplayName9" xml:space="preserve">
    <value>index</value>
  </data>
  <data name="Description32" xml:space="preserve">
    <value>Specifies the source of unstructured data to be converted to a table.  This field only supports String variables.</value>
  </data>
  <data name="DisplayName10" xml:space="preserve">
    <value>position</value>
  </data>
  <data name="Description33" xml:space="preserve">
    <value>If you use OCR for fetching and the Get Word Information check box is selected, this field contains IEnumerable&lt;KeyValuePair&lt;Rectangle,String&gt;&gt; variables with WordsInfo values</value>
  </data>
  <data name="Category5" xml:space="preserve">
    <value>Fixed format option</value>
  </data>
  <data name="DisplayName11" xml:space="preserve">
    <value>Column width</value>
  </data>
  <data name="Description34" xml:space="preserve">
    <value>Specifies the size of the column to be created in the table.  This field only supports the IEnumerable &lt;Int32&gt; variable.</value>
  </data>
  <data name="Category6" xml:space="preserve">
    <value>Formatting options</value>
  </data>
  <data name="DisplayName12" xml:space="preserve">
    <value>Column separator</value>
  </data>
  <data name="Description35" xml:space="preserve">
    <value>Specifies the character to use as the column separator.  This field only supports String variables.</value>
  </data>
  <data name="DisplayName13" xml:space="preserve">
    <value>Line separator</value>
  </data>
  <data name="Description36" xml:space="preserve">
    <value>Specifies the character to be used as a newline separator.  This field only supports String variables.</value>
  </data>
  <data name="DisplayName14" xml:space="preserve">
    <value>CSV parsing</value>
  </data>
  <data name="DisplayName15" xml:space="preserve">
    <value>Type automatic detection</value>
  </data>
  <data name="Description37" xml:space="preserve">
    <value>When selected, the column or row type is automatically detected, whether it is String, Int32, etc.</value>
  </data>
  <data name="DisplayName16" xml:space="preserve">
    <value>Column heading</value>
  </data>
  <data name="Description38" xml:space="preserve">
    <value>If checked, the first identified column is used as the column header</value>
  </data>
  <data name="DisplayName17" xml:space="preserve">
    <value>Row header</value>
  </data>
  <data name="Description39" xml:space="preserve">
    <value>If checked, the first identified row is used as the row header</value>
  </data>
  <data name="Description40" xml:space="preserve">
    <value>Generated DataTable variable</value>
  </data>
  <data name="DisplayName18" xml:space="preserve">
    <value>Row</value>
  </data>
  <data name="Description41" xml:space="preserve">
    <value>The DataRow object from which to retrieve the value</value>
  </data>
  <data name="DisplayName19" xml:space="preserve">
    <value>Column</value>
  </data>
  <data name="Description42" xml:space="preserve">
    <value>The DataColumn object whose value is to be retrieved from the DataRow.  If this property is set, the ColumnName and ColumnIndex properties are ignored.</value>
  </data>
  <data name="DisplayName20" xml:space="preserve">
    <value>Column index</value>
  </data>
  <data name="Description43" xml:space="preserve">
    <value>The index of the column whose value is to be retrieved from the DataRow</value>
  </data>
  <data name="DisplayName21" xml:space="preserve">
    <value>Column name</value>
  </data>
  <data name="Description44" xml:space="preserve">
    <value>The name of the column whose value is to be retrieved from the DataRow.  If this property is set, the ColumnIndex property is ignored</value>
  </data>
  <data name="DisplayName22" xml:space="preserve">
    <value>value</value>
  </data>
  <data name="Description45" xml:space="preserve">
    <value>Specify the column value of the DataRow</value>
  </data>
  <data name="DisplayName23" xml:space="preserve">
    <value>DataTable1</value>
  </data>
  <data name="Description46" xml:space="preserve">
    <value>The first table to use in this operation is stored in the DataTable variable.  This field only supports DataTable variables</value>
  </data>
  <data name="DisplayName24" xml:space="preserve">
    <value>DataTable2</value>
  </data>
  <data name="Description47" xml:space="preserve">
    <value>The second table to be used in this operation is stored in the DataTable variable.  This field only supports DataTable variables</value>
  </data>
  <data name="DisplayName25" xml:space="preserve">
    <value>JoinType</value>
  </data>
  <data name="Description48" xml:space="preserve">
    <value>The DataTable variable in which to perform the lookup</value>
  </data>
  <data name="DisplayName26" xml:space="preserve">
    <value>Find value</value>
  </data>
  <data name="Description49" xml:space="preserve">
    <value>The value to search for in the specified DataTable variable</value>
  </data>
  <data name="Category7" xml:space="preserve">
    <value>Start column</value>
  </data>
  <data name="Description50" xml:space="preserve">
    <value>The DataColumn object whose value is to be retrieved from the DataRow.  Setting a variable in this property field disables the other two properties</value>
  </data>
  <data name="Description51" xml:space="preserve">
    <value>The index of the column whose value is to be retrieved from the DataRow.  Setting a variable in this property field disables the other two properties</value>
  </data>
  <data name="Description52" xml:space="preserve">
    <value>The name of the column whose value is to be retrieved from the DataRow.  Setting a variable in this property field disables the other two properties</value>
  </data>
  <data name="Category8" xml:space="preserve">
    <value>End column</value>
  </data>
  <data name="Description53" xml:space="preserve">
    <value>Returns the cell found at the coordinates between this column and the value in the RowIndex property</value>
  </data>
  <data name="Description54" xml:space="preserve">
    <value>Returns the column index of the cell found at the coordinates between this column and the value of the RowIndex property</value>
  </data>
  <data name="Description55" xml:space="preserve">
    <value>Returns the column name of the cell found at the coordinates between this column and the value in the RowIndex property</value>
  </data>
  <data name="DisplayName27" xml:space="preserve">
    <value>Cell value</value>
  </data>
  <data name="Description56" xml:space="preserve">
    <value>The value found in the cell</value>
  </data>
  <data name="DisplayName28" xml:space="preserve">
    <value>Row index</value>
  </data>
  <data name="Description57" xml:space="preserve">
    <value>Row index of the cell</value>
  </data>
  <data name="DisplayName29" xml:space="preserve">
    <value>aims</value>
  </data>
  <data name="Description58" xml:space="preserve">
    <value>Merge the DataTable object of the source DataTable</value>
  </data>
  <data name="DisplayName30" xml:space="preserve">
    <value>source</value>
  </data>
  <data name="Description59" xml:space="preserve">
    <value>The DataTable object to be added to the target DataTable</value>
  </data>
  <data name="DisplayName31" xml:space="preserve">
    <value>Merge operation</value>
  </data>
  <data name="Description60" xml:space="preserve">
    <value>Specify what to do when merging two DataTables</value>
  </data>
  <data name="Description61" xml:space="preserve">
    <value>The DataTable object to write to the string</value>
  </data>
  <data name="DisplayName32" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="Description62" xml:space="preserve">
    <value>DataTable as a string output</value>
  </data>
  <data name="Description63" xml:space="preserve">
    <value>The DataTable object from which to remove the column</value>
  </data>
  <data name="Description64" xml:space="preserve">
    <value>The DataColumn object to be removed from the column set of the DataTable.  If this property is set, the other two column index options are ignored</value>
  </data>
  <data name="Description65" xml:space="preserve">
    <value>The index of the column to remove from the column set of the DataTable.  If this property is set, the other two column index options are ignored</value>
  </data>
  <data name="Description66" xml:space="preserve">
    <value>The name of the column to remove from the column set of the DataTable.  If this property is set, the other two column index options are ignored</value>
  </data>
  <data name="Description67" xml:space="preserve">
    <value>The DataRow object to delete.  Ignore row indexing option if this property is set</value>
  </data>
  <data name="Description68" xml:space="preserve">
    <value>The index of the row to delete.  Ignore DataRow indexing option if this property is set</value>
  </data>
  <data name="Description69" xml:space="preserve">
    <value>The DataTable variable from which to remove duplicate rows</value>
  </data>
  <data name="Description70" xml:space="preserve">
    <value>Outputs a DataTable with duplicate rows removed, stored in the DataTable variable.  Placing the same variable as the variable in the Input field changes the initial variable, while providing a new variable makes the initial variable unaffected.</value>
  </data>
  <data name="Description71" xml:space="preserve">
    <value>The DataTable variable to be sorted</value>
  </data>
  <data name="Category9" xml:space="preserve">
    <value>Column sort</value>
  </data>
  <data name="Description72" xml:space="preserve">
    <value>The variable of the column sorted by it.  This field only supports DataColumn variables.  Setting a variable in this property field disables the other two properties</value>
  </data>
  <data name="DisplayName33" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="DisplayName34" xml:space="preserve">
    <value>Sort</value>
  </data>
  <data name="Description73" xml:space="preserve">
    <value>The sorted DataTable variable.  Placing the same variable as the variable in the Input field changes the initial variable, and adding a new variable leaves the initial variable unaffected.</value>
  </data>
  <data name="DisplayName35" xml:space="preserve">
    <value>Date time</value>
  </data>
  <data name="DisplayName36" xml:space="preserve">
    <value>Conversion type</value>
  </data>
  <data name="DisplayName37" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="DisplayName38" xml:space="preserve">
    <value>Time type</value>
  </data>
  <data name="DisplayName39" xml:space="preserve">
    <value>UI Element</value>
  </data>
  <data name="Description74" xml:space="preserve">
    <value>Enter UIElement</value>
  </data>
  <data name="DisplayName40" xml:space="preserve">
    <value>Use coordinate points</value>
  </data>
  <data name="Description75" xml:space="preserve">
    <value>The text of the popup window.</value>
  </data>
  <data name="Description76" xml:space="preserve">
    <value>The title of the popup window.</value>
  </data>
  <data name="Description77" xml:space="preserve">
    <value>Duration until the pop-up window closes automatically.  By default, pop-ups do not close.</value>
  </data>
  <data name="Description78" xml:space="preserve">
    <value>This represents the full path or external URL of the HTML file.</value>
  </data>
  <data name="Description79" xml:space="preserve">
    <value>The string returned by the provided HTML page.</value>
  </data>
  <data name="Description80" xml:space="preserve">
    <value>The label of the form field.</value>
  </data>
  <data name="Description81" xml:space="preserve">
    <value>An array of options to choose from.  If you set it to contain only one element, a text box will appear to compose the text.  If it is set to contain 2 or 3 elements, they will appear as the radio button to choose from.  If it is set to contain more than 3 items, they will be displayed as a combo box for selection.  This field only supports string array variables.</value>
  </data>
  <data name="Description82" xml:space="preserve">
    <value>Enter the title of the dialog.</value>
  </data>
  <data name="Description83" xml:space="preserve">
    <value>The value inserted by the user in the input dialog.</value>
  </data>
  <data name="Description84" xml:space="preserve">
    <value>The title of the message box dialog.</value>
  </data>
  <data name="Description85" xml:space="preserve">
    <value>The text to display in the message box.</value>
  </data>
  <data name="Description86" xml:space="preserve">
    <value>A string representing the button pressed in the message box dialog.  It can be: Ok, Yes, No or Cancel</value>
  </data>
  <data name="DisplayName41" xml:space="preserve">
    <value>System folder</value>
  </data>
  <data name="DisplayName42" xml:space="preserve">
    <value>Folder path</value>
  </data>
  <data name="DisplayName43" xml:space="preserve">
    <value>Variable name</value>
  </data>
  <data name="DisplayName44" xml:space="preserve">
    <value>Variable</value>
  </data>
  <data name="DisplayName45" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="DisplayName46" xml:space="preserve">
    <value>Result</value>
  </data>
  <data name="DisplayName47" xml:space="preserve">
    <value>Beep type</value>
  </data>
  <data name="Description87" xml:space="preserve">
    <value>The path to the file.  If the path is incomplete, create a file in the project folder.</value>
  </data>
  <data name="Description88" xml:space="preserve">
    <value>The text to be attached to the file.</value>
  </data>
  <data name="Description89" xml:space="preserve">
    <value>The path to the file to be copied.</value>
  </data>
  <data name="Description90" xml:space="preserve">
    <value>The target path of the file to be copied.</value>
  </data>
  <data name="Description91" xml:space="preserve">
    <value>The full path to the directory to be created.</value>
  </data>
  <data name="Description92" xml:space="preserve">
    <value>The name of the file to create.</value>
  </data>
  <data name="Description93" xml:space="preserve">
    <value>The full path to the file to be created.</value>
  </data>
  <data name="Description94" xml:space="preserve">
    <value>The path to the file or directory to be permanently deleted.</value>
  </data>
  <data name="Description95" xml:space="preserve">
    <value>The path to the file to move.</value>
  </data>
  <data name="Description96" xml:space="preserve">
    <value>The target path to move the file.</value>
  </data>
  <data name="Description97" xml:space="preserve">
    <value>The full path to check.</value>
  </data>
  <data name="Description98" xml:space="preserve">
    <value>Declare whether a document or file is found.</value>
  </data>
  <data name="Description99" xml:space="preserve">
    <value>The path to the file to be read.</value>
  </data>
  <data name="Description100" xml:space="preserve">
    <value>The text extracted from the file stored in the string variable.</value>
  </data>
  <data name="Description101" xml:space="preserve">
    <value>The path to the file to be written.</value>
  </data>
  <data name="Description102" xml:space="preserve">
    <value>The text to be written to the file.</value>
  </data>
  <data name="DisplayName48" xml:space="preserve">
    <value>Credential name</value>
  </data>
  <data name="Description103" xml:space="preserve">
    <value>The name of the credential obtained in the system</value>
  </data>
  <data name="DisplayName49" xml:space="preserve">
    <value>Timeout (ms)</value>
  </data>
  <data name="Description104" xml:space="preserve">
    <value>Specifies the amount of time, in milliseconds, to wait for an activity to run before an error is raised.  The default is 30000 milliseconds (30 seconds)</value>
  </data>
  <data name="Description105" xml:space="preserve">
    <value>The secure password of the retrieved credentials</value>
  </data>
  <data name="DisplayName50" xml:space="preserve">
    <value>UserName</value>
  </data>
  <data name="Description106" xml:space="preserve">
    <value>User name of the retrieved voucher</value>
  </data>
  <data name="Description107" xml:space="preserve">
    <value>Specifies the amount of time, in milliseconds, to wait for an activity to run before an error is raised. The default value is 30000 milliseconds (30 seconds)</value>
  </data>
  <data name="DisplayName51" xml:space="preserve">
    <value>Error continues to execute</value>
  </data>
  <data name="Description108" xml:space="preserve">
    <value>Specifies whether automation should continue even if the activity raises an error</value>
  </data>
  <data name="Category10" xml:space="preserve">
    <value>Credential option</value>
  </data>
  <data name="Description109" xml:space="preserve">
    <value>Set the username of the credential</value>
  </data>
  <data name="Description110" xml:space="preserve">
    <value>Set the password for the credential</value>
  </data>
  <data name="DisplayName52" xml:space="preserve">
    <value>Credential name</value>
  </data>
  <data name="Description111" xml:space="preserve">
    <value>The name of the credential to update</value>
  </data>
  <data name="Description112" xml:space="preserve">
    <value>The PowerShell command to execute.</value>
  </data>
  <data name="Description113" xml:space="preserve">
    <value>A collection of PSObjects passed to the writer of the pipeline used to execute the command.  Can be the output of another InvokePowerShell activity.</value>
  </data>
  <data name="Description114" xml:space="preserve">
    <value>A set of type parameters objets returned when the command is executed.  Can be used to pipe several InvokePowerShell activities.</value>
  </data>
  <data name="Description115" xml:space="preserve">
    <value>Workflow file path, must be enclosed in double quotes</value>
  </data>
  <data name="ReselectIt" xml:space="preserve">
    <value>Reselect</value>
  </data>
  <data name="TapScreen" xml:space="preserve">
    <value>Indicate on screen</value>
  </data>
  <data name="DragControlHere" xml:space="preserve">
    <value>Drag and drop controls here</value>
  </data>
  <data name="GuideText" xml:space="preserve">
    <value>Guide</value>
  </data>
  <data name="DoubleQuotesHintText" xml:space="preserve">
    <value>Text must be enclosed in double quotes</value>
  </data>
  <data name="EditCode" xml:space="preserve">
    <value>Edit code</value>
  </data>
  <data name="EditParameter" xml:space="preserve">
    <value>Edit parameter</value>
  </data>
  <data name="EnterPassword" xml:space="preserve">
    <value>Enter password</value>
  </data>
  <data name="ImportParameters" xml:space="preserve">
    <value>Import parameters</value>
  </data>
  <data name="LevelText" xml:space="preserve">
    <value>Level</value>
  </data>
  <data name="NewsText" xml:space="preserve">
    <value>News</value>
  </data>
  <data name="SpecialFolder" xml:space="preserve">
    <value>Special folder</value>
  </data>
  <data name="WorkflowFilepathTip" xml:space="preserve">
    <value>Workflow file path, must be enclosed in double quotes</value>
  </data>
  <data name="CommonText" xml:space="preserve">
    <value>Common</value>
  </data>
  <data name="InputText" xml:space="preserve">
    <value>Input</value>
  </data>
</root>