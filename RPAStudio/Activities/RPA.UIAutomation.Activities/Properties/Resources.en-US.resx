<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Category1" xml:space="preserve">
    <value>Public</value>
  </data>
  <data name="DisplayName1" xml:space="preserve">
    <value>Error execution</value>
  </data>
  <data name="Description1" xml:space="preserve">
    <value>Specifies whether automation should continue even if the activity raises an error</value>
  </data>
  <data name="Category2" xml:space="preserve">
    <value>UI Object</value>
  </data>
  <data name="DisplayName2" xml:space="preserve">
    <value>Window selector</value>
  </data>
  <data name="Description2" xml:space="preserve">
    <value>The Text property used to find specific UI elements when performing activities</value>
  </data>
  <data name="DisplayName3" xml:space="preserve">
    <value>UI Element</value>
  </data>
  <data name="Description3" xml:space="preserve">
    <value>Enter UI Element</value>
  </data>
  <data name="Category3" xml:space="preserve">
    <value>Enter</value>
  </data>
  <data name="DisplayName4" xml:space="preserve">
    <value>Attributes</value>
  </data>
  <data name="Description4" xml:space="preserve">
    <value>The name of the property to retrieve.  This field only supports strings</value>
  </data>
  <data name="Category4" xml:space="preserve">
    <value>Output</value>
  </data>
  <data name="DisplayName5" xml:space="preserve">
    <value>Result</value>
  </data>
  <data name="Description5" xml:space="preserve">
    <value>Specify the value of the attribute</value>
  </data>
  <data name="DisplayName6" xml:space="preserve">
    <value>Matrix coordinates</value>
  </data>
  <data name="Description6" xml:space="preserve">
    <value>Result boundary rectangle of UiElement specified in screen coordinates</value>
  </data>
  <data name="Category5" xml:space="preserve">
    <value>Option</value>
  </data>
  <data name="DisplayName7" xml:space="preserve">
    <value>Area shear direction</value>
  </data>
  <data name="Description7" xml:space="preserve">
    <value>Extend the direction of the clipping region</value>
  </data>
  <data name="Description8" xml:space="preserve">
    <value>Use the UiElement variable returned by another activity.  This property cannot be used with the Selector property.  This field only supports UiElement variables</value>
  </data>
  <data name="Category6" xml:space="preserve">
    <value>UI Element clipping matrix</value>
  </data>
  <data name="DisplayName8" xml:space="preserve">
    <value>Execution wait</value>
  </data>
  <data name="Description9" xml:space="preserve">
    <value>The delay (in milliseconds) before the screenshot of the specified UI element is taken.  The default time is 300 milliseconds.</value>
  </data>
  <data name="DisplayName9" xml:space="preserve">
    <value>Screenshot</value>
  </data>
  <data name="Description10" xml:space="preserve">
    <value>Screenshot of the results.  This field only supports image variables</value>
  </data>
  <data name="Description11" xml:space="preserve">
    <value>Specifies the amount of time, in milliseconds, to wait for an activity to run.  The default is 10000 milliseconds (10 seconds)</value>
  </data>
  <data name="Description12" xml:space="preserve">
    <value>The name of the property to wait for.  A predefined list of attributes can be used as a drop-down list in the activity.  This field only supports String variables.</value>
  </data>
  <data name="DisplayName10" xml:space="preserve">
    <value>Attribute value</value>
  </data>
  <data name="Description13" xml:space="preserve">
    <value>Specifies the expected value of the attribute.  This field only supports String variables.</value>
  </data>
  <data name="DisplayName11" xml:space="preserve">
    <value>Browser</value>
  </data>
  <data name="Description14" xml:space="preserve">
    <value>Existing browser variables to attach</value>
  </data>
  <data name="DisplayName12" xml:space="preserve">
    <value>Timeout</value>
  </data>
  <data name="Description15" xml:space="preserve">
    <value>Specifies the amount of time, in milliseconds, to wait for an activity to run before an error is raised.  The default is 30000 milliseconds (30 seconds)</value>
  </data>
  <data name="DisplayName13" xml:space="preserve">
    <value>UI Selector</value>
  </data>
  <data name="DisplayName14" xml:space="preserve">
    <value>UI Browser</value>
  </data>
  <data name="Description16" xml:space="preserve">
    <value>The Browser variable returned by the activity</value>
  </data>
  <data name="DisplayName15" xml:space="preserve">
    <value>Browser Type</value>
  </data>
  <data name="Description17" xml:space="preserve">
    <value>Choose the type of browser you want to use.  The following options are available: IE, Firefox, Chrome</value>
  </data>
  <data name="DisplayName16" xml:space="preserve">
    <value>Browser Browser</value>
  </data>
  <data name="Description18" xml:space="preserve">
    <value>The browser page to close.  This field only supports the Browser variable.</value>
  </data>
  <data name="DisplayName17" xml:space="preserve">
    <value>Delay time (end)</value>
  </data>
  <data name="Description19" xml:space="preserve">
    <value>The delay (in milliseconds) after the activity is executed. The default time is 3000 milliseconds.</value>
  </data>
  <data name="DisplayName18" xml:space="preserve">
    <value>Delay time (start)</value>
  </data>
  <data name="Description20" xml:space="preserve">
    <value>The delay (in milliseconds) before the activity begins any operation, the default amount of time is 3000 milliseconds.</value>
  </data>
  <data name="DisplayName19" xml:space="preserve">
    <value>JavaScript code</value>
  </data>
  <data name="Description21" xml:space="preserve">
    <value>The JavaScript code to run.  You can write it here as a string or add the full path to the .js file containing the code to execute.</value>
  </data>
  <data name="DisplayName20" xml:space="preserve">
    <value>JavaScript code data</value>
  </data>
  <data name="Description22" xml:space="preserve">
    <value>Enter the data of the JavaScript code as a string or string variable</value>
  </data>
  <data name="DisplayName21" xml:space="preserve">
    <value>JavaScript output</value>
  </data>
  <data name="Description23" xml:space="preserve">
    <value>String result returned from JavaScript code</value>
  </data>
  <data name="Description24" xml:space="preserve">
    <value>The browser page to navigate.  This field only supports the Browser variable.</value>
  </data>
  <data name="DisplayName22" xml:space="preserve">
    <value>Navigation URL</value>
  </data>
  <data name="Description25" xml:space="preserve">
    <value>The location of the page to display</value>
  </data>
  <data name="Description26" xml:space="preserve">
    <value>New browser tab page.  This field only supports the Browser variable.</value>
  </data>
  <data name="DisplayName23" xml:space="preserve">
    <value>URL</value>
  </data>
  <data name="Description27" xml:space="preserve">
    <value>The URL to open in the specified browser</value>
  </data>
  <data name="Description28" xml:space="preserve">
    <value>Specify browser response timeout (ms)</value>
  </data>
  <data name="DisplayName24" xml:space="preserve">
    <value>Private/no trace</value>
  </data>
  <data name="DisplayName25" xml:space="preserve">
    <value>Hide</value>
  </data>
  <data name="Description29" xml:space="preserve">
    <value>Store the variables of the browser.  This field only accepts the Browser variable</value>
  </data>
  <data name="Description30" xml:space="preserve">
    <value>The delay in milliseconds after the activity is executed. The default time is 300 milliseconds.</value>
  </data>
  <data name="Description31" xml:space="preserve">
    <value>The delay (in milliseconds) before the activity begins any operation, the default amount of time is 200 milliseconds.</value>
  </data>
  <data name="DisplayName26" xml:space="preserve">
    <value>HTML attribute</value>
  </data>
  <data name="Description32" xml:space="preserve">
    <value>The name of the HTML attribute to change</value>
  </data>
  <data name="DisplayName27" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="Description33" xml:space="preserve">
    <value>The value to be set to the specified property.  Only string variables are supported</value>
  </data>
  <data name="Description34" xml:space="preserve">
    <value>The delay (in milliseconds) before the activity begins any operation, the default amount of time is 300 milliseconds.</value>
  </data>
  <data name="DisplayName28" xml:space="preserve">
    <value>Operating</value>
  </data>
  <data name="DisplayName29" xml:space="preserve">
    <value>Colour</value>
  </data>
  <data name="DisplayName30" xml:space="preserve">
    <value>Highlight time (seconds)</value>
  </data>
  <data name="DisplayName31" xml:space="preserve">
    <value>Project</value>
  </data>
  <data name="DisplayName32" xml:space="preserve">
    <value>Add to existing selection</value>
  </data>
  <data name="DisplayName33" xml:space="preserve">
    <value>Project Team</value>
  </data>
  <data name="Description35" xml:space="preserve">
    <value>The delay (in milliseconds) before the activity begins any operation, the default amount of time is 2000 milliseconds.</value>
  </data>
  <data name="DisplayName34" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="Description36" xml:space="preserve">
    <value>a string to write the Text property of the UI element</value>
  </data>
  <data name="DisplayName35" xml:space="preserve">
    <value>Anchor position</value>
  </data>
  <data name="Category7" xml:space="preserve">
    <value>Anchor boundary box</value>
  </data>
  <data name="Category8" xml:space="preserve">
    <value>Target bounding box</value>
  </data>
  <data name="Description37" xml:space="preserve">
    <value>Indicates if the element exists.  This field only supports Boolean variables</value>
  </data>
  <data name="Description38" xml:space="preserve">
    <value>UI Element variable.  This property cannot be used with the Selector property.  This field only supports UI Element variables</value>
  </data>
  <data name="Description39" xml:space="preserve">
    <value>UI Elements used in subsequent child activities</value>
  </data>
  <data name="Description40" xml:space="preserve">
    <value>Specifies whether automation should continue even if the activity raises an error, with a value of (True or False)</value>
  </data>
  <data name="DisplayName36" xml:space="preserve">
    <value>Waiting for element to stop</value>
  </data>
  <data name="Description41" xml:space="preserve">
    <value>When this option is selected, the activity will wait until the end of the specified event</value>
  </data>
  <data name="DisplayName37" xml:space="preserve">
    <value>Waiting for element to disappear</value>
  </data>
  <data name="Description42" xml:space="preserve">
    <value>When this option is selected, even if the ui element is still active, the activity will only wait until the ui element disappears from the screen.</value>
  </data>
  <data name="Description43" xml:space="preserve">
    <value>The window to close.  This field only accepts Window variables</value>
  </data>
  <data name="DisplayName38" xml:space="preserve">
    <value>Range</value>
  </data>
  <data name="DisplayName39" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="Description44" xml:space="preserve">
    <value>The xml string specifies the conditions that all UI Objects in the collection should satisfy.</value>
  </data>
  <data name="DisplayName40" xml:space="preserve">
    <value>Child element</value>
  </data>
  <data name="Description45" xml:space="preserve">
    <value>All ui child elements will follow the set filter and scope.  This field only supports IEnumerable&lt;UIElement&gt; variables</value>
  </data>
  <data name="DisplayName41" xml:space="preserve">
    <value>Waiting for activity</value>
  </data>
  <data name="Description46" xml:space="preserve">
    <value>When this option is selected, the activity will wait for the specified ui element to become active.</value>
  </data>
  <data name="DisplayName42" xml:space="preserve">
    <value>Waiting for visible</value>
  </data>
  <data name="Description47" xml:space="preserve">
    <value>When this option is selected, the activity will wait for the specified ui element to become visible.</value>
  </data>
  <data name="Description48" xml:space="preserve">
    <value>The UI Element found.  This field only supports UIElement type variables</value>
  </data>
  <data name="DisplayName43" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="DisplayName44" xml:space="preserve">
    <value>Relative element</value>
  </data>
  <data name="Description49" xml:space="preserve">
    <value>The relative ui element you are looking for.  Only UIElement type variables are supported</value>
  </data>
  <data name="DisplayName45" xml:space="preserve">
    <value>Parent node level</value>
  </data>
  <data name="Description50" xml:space="preserve">
    <value>Specify which level of the ui hierarchy to find the parent node</value>
  </data>
  <data name="DisplayName46" xml:space="preserve">
    <value>Parent node</value>
  </data>
  <data name="Description51" xml:space="preserve">
    <value>The parent of the element.  Only UIElement type variables are supported</value>
  </data>
  <data name="Description52" xml:space="preserve">
    <value>Hide the previous window when a ui element is selected</value>
  </data>
  <data name="Description53" xml:space="preserve">
    <value>This option allows an area to be selected on the screen.</value>
  </data>
  <data name="Description54" xml:space="preserve">
    <value>Select the specified ui element</value>
  </data>
  <data name="Description55" xml:space="preserve">
    <value>Specifies that the remaining activities will continue even if the current activity fails. Only Boolean values are supported.</value>
  </data>
  <data name="Description56" xml:space="preserve">
    <value>The delay time, in milliseconds, after the activity is executed. The default time is 300 milliseconds.</value>
  </data>
  <data name="Description57" xml:space="preserve">
    <value>The delay time, in milliseconds, before the deferred the activity is executed. The default time is 300 milliseconds.</value>
  </data>
  <data name="Category9" xml:space="preserve">
    <value>Key options</value>
  </data>
  <data name="DisplayName47" xml:space="preserve">
    <value>Other buttons</value>
  </data>
  <data name="Category10" xml:space="preserve">
    <value>Mouse options</value>
  </data>
  <data name="DisplayName48" xml:space="preserve">
    <value>Use coordinate points</value>
  </data>
  <data name="Category11" xml:space="preserve">
    <value>UI Element matrix</value>
  </data>
  <data name="Description58" xml:space="preserve">
    <value>Enter UIAutomationInfo</value>
  </data>
  <data name="DisplayName49" xml:space="preserve">
    <value>String</value>
  </data>
  <data name="Description59" xml:space="preserve">
    <value>The string to click</value>
  </data>
  <data name="Description60" xml:space="preserve">
    <value>The time (in milliseconds) before the deferred activity begins any operation.  The default time is 200 milliseconds.</value>
  </data>
  <data name="DisplayName50" xml:space="preserve">
    <value>Specified number</value>
  </data>
  <data name="Description61" xml:space="preserve">
    <value>If the string in the text field appears multiple times in the specified ui element, specify the number of occurrences here instead of the number of clicks</value>
  </data>
  <data name="Description62" xml:space="preserve">
    <value>If this option is checked, the screen layout of the selected text will remain unchanged</value>
  </data>
  <data name="Description63" xml:space="preserve">
    <value>The text to click</value>
  </data>
  <data name="DisplayName51" xml:space="preserve">
    <value>Waiting time</value>
  </data>
  <data name="Description64" xml:space="preserve">
    <value>The amount of time to wait for loading to the next page</value>
  </data>
  <data name="DisplayName52" xml:space="preserve">
    <value>Extract maximum</value>
  </data>
  <data name="Description65" xml:space="preserve">
    <value>The maximum value of the data that can be extracted</value>
  </data>
  <data name="DisplayName53" xml:space="preserve">
    <value>Next connector</value>
  </data>
  <data name="Description66" xml:space="preserve">
    <value>The selector identifies the link/button used to navigate to the next page.  Should be relative to the existing uielement attribute</value>
  </data>
  <data name="DisplayName54" xml:space="preserve">
    <value>Send a form message</value>
  </data>
  <data name="Description67" xml:space="preserve">
    <value>If checked, clicking the next link/ button for navigating to the next page will be performed by sending a specific message to the othe target application.  This input method works in the background and is compatible with most desktop applications, but it's not the fastest way</value>
  </data>
  <data name="DisplayName55" xml:space="preserve">
    <value>Simulated click</value>
  </data>
  <data name="Description68" xml:space="preserve">
    <value>If checked, it will use the technology simulation of the target application to click the next link/button used to navigate the next page.  This input method is the fastest of the three input methods and works in the background.</value>
  </data>
  <data name="DisplayName56" xml:space="preserve">
    <value>Extract target data</value>
  </data>
  <data name="Description69" xml:space="preserve">
    <value>An xml string that allows you to define which data to extract from the specified web page</value>
  </data>
  <data name="Description70" xml:space="preserve">
    <value>The ui element where the string you are looking for is located.</value>
  </data>
  <data name="DisplayName57" xml:space="preserve">
    <value>Ignore hiding</value>
  </data>
  <data name="Description71" xml:space="preserve">
    <value>If this check box is selected, the string information on the specified ui element is not extracted, and this check box is not selected by default.</value>
  </data>
  <data name="DisplayName58" xml:space="preserve">
    <value>Separator</value>
  </data>
  <data name="Description72" xml:space="preserve">
    <value>Specifies the character to use as a string pioneer.  If the field is empty, all known text separators (spaces, periods, commas, etc.) are used</value>
  </data>
  <data name="DisplayName59" xml:space="preserve">
    <value>Word information</value>
  </data>
  <data name="Description73" xml:space="preserve">
    <value>Screen coordinates of each word found in the specified ui element</value>
  </data>
  <data name="DisplayName60" xml:space="preserve">
    <value>Window title</value>
  </data>
  <data name="Description74" xml:space="preserve">
    <value>Enter window title</value>
  </data>
  <data name="DisplayName61" xml:space="preserve">
    <value>Window class name</value>
  </data>
  <data name="Description75" xml:space="preserve">
    <value>Enter window class name</value>
  </data>
  <data name="DisplayName62" xml:space="preserve">
    <value>Window</value>
  </data>
  <data name="Description76" xml:space="preserve">
    <value>The variable that stores the window.  This field only accepts Window variables</value>
  </data>
  <data name="Description77" xml:space="preserve">
    <value>The active window found.  This field only supports Window variables.  The SearchScope and Selector properties are ignored when the Window variable is specified.</value>
  </data>
  <data name="DisplayName63" xml:space="preserve">
    <value>Window handle</value>
  </data>
  <data name="Description78" xml:space="preserve">
    <value>The window handle to close.</value>
  </data>
  <data name="DisplayName64" xml:space="preserve">
    <value>Height</value>
  </data>
  <data name="Description79" xml:space="preserve">
    <value>The new height of the window, supporting positive and negative integers</value>
  </data>
  <data name="DisplayName65" xml:space="preserve">
    <value>Width</value>
  </data>
  <data name="Description80" xml:space="preserve">
    <value>The new width of the window, supporting positive and negative integers</value>
  </data>
  <data name="DisplayName66" xml:space="preserve">
    <value>Coordinate X</value>
  </data>
  <data name="Description81" xml:space="preserve">
    <value>The new position coordinate of the window is X-axis, supporting positive and negative integers</value>
  </data>
  <data name="DisplayName67" xml:space="preserve">
    <value>Coordinate Y</value>
  </data>
  <data name="Description82" xml:space="preserve">
    <value>The new coordinate position of the window is Y-axis, supporting positive and negative integers</value>
  </data>
  <data name="ReselectIt" xml:space="preserve">
    <value>Reselect</value>
  </data>
  <data name="TapScreen" xml:space="preserve">
    <value>Indicate on screen</value>
  </data>
  <data name="AttributeNameToGet.HintText" xml:space="preserve">
    <value>The name of the attribute to retrieve</value>
  </data>
  <data name="AttributeToExpect.HintText" xml:space="preserve">
    <value>Expected value of the specified attribute</value>
  </data>
  <data name="ChangeHTMLAttribute.HintText" xml:space="preserve">
    <value>The name of the HTML attribute to change</value>
  </data>
  <data name="PropertyNameToWait.HintText" xml:space="preserve">
    <value>The name of the property to wait for</value>
  </data>
  <data name="SetAttributeValue.HintText" xml:space="preserve">
    <value>The value to be set to the specified attribute. Only string variables are supported</value>
  </data>
  <data name="SpecifyTheURL.HintText" xml:space="preserve">
    <value>Specify the URL opened in the browser</value>
  </data>
</root>